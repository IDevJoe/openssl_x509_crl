PKIX1

DEFINITIONS EXPLICIT TAGS ::=

BEGIN

UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING

BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING

UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING


-- attribute data types

Attribute ::= SEQUENCE {
  type   AttributeType,
  values SET OF AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY

AttributeTypeAndValue ::= SEQUENCE {
  type  AttributeType,
  value AttributeValue }


-- naming data types

Name ::= CHOICE {
  rdnSequence RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

DistinguishedName ::= RDNSequence

RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue


-- Directory string type

DirectoryString ::= CHOICE {
  teletexString   TeletexString (SIZE (1..MAX)),
  printableString PrintableString (SIZE (1..MAX)),
  universalString UniversalString (SIZE (1..MAX)),
  utf8String      UTF8String (SIZE (1..MAX)),
  bmpString       BMPString (SIZE(1..MAX)) }


-- certificate specific structures begin here

Certificate ::= SEQUENCE {
  tbsCertificate     TBSCertificate,
  signatureAlgorithm AlgorithmIdentifier,
  signature          BIT STRING }

TBSCertificate ::= SEQUENCE {
  version                 [0] Version DEFAULT v1,
  serialNumber                CertificateSerialNumber,
  signature                   AlgorithmIdentifier,
  issuer                      Name,
  validity                    Validity,
  subject                     Name,
  subjectPublicKeyInfo        SubjectPublicKeyInfo,
  issuerUniqueIdentifier  [1] IMPLICIT UniqueIdentifier OPTIONAL,
  subjectUniqueIdentifier [2] IMPLICIT UniqueIdentifier OPTIONAL,
  extensions              [3] Extensions OPTIONAL }

Version ::= INTEGER { v1(0), v2(1), v3(2) }

CertificateSerialNumber ::= INTEGER

Validity ::= SEQUENCE {
  notBefore Time,
  notAfter  Time }

Time ::= CHOICE {
  utcTime     UTCTime,
  generalTime GeneralizedTime }

UniqueIdentifier ::= BIT STRING

SubjectPublicKeyInfo ::= SEQUENCE {
  algorithm        AlgorithmIdentifier,
  subjectPublicKey BIT STRING }

Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension

Extension ::= SEQUENCE {
  extnId    OBJECT IDENTIFIER,
  critical  BOOLEAN DEFAULT FALSE,
  extnValue OCTET STRING }

AlgorithmIdentifier ::= SEQUENCE {
  algorithm  OBJECT IDENTIFIER,
  parameters ANY DEFINED BY algorithm OPTIONAL }


-- x400 address syntax starts here

ORAddress ::= SEQUENCE {
  built-in-standard-attributes       BuiltInStandardAttributes,
  built-in-domain-defined-attributes BuiltInDomainDefinedAttributes OPTIONAL,
  extension-attributes               ExtensionAttributes OPTIONAL }

BuiltInStandardAttributes ::= SEQUENCE {
  country-name                   CountryName OPTIONAL,
  administration-domain-name     AdministrationDomainName OPTIONAL,
  network-address            [0] NetworkAddress OPTIONAL,
  terminal-identifier        [1] TerminalIdentifier OPTIONAL,
  private-domain-name        [2] PrivateDomainName OPTIONAL,
  organization-name          [3] OrganizationName OPTIONAL,
  numeric-user-identifier    [4] NumericUserIdentifier OPTIONAL,
  personal-name              [5] PersonalName OPTIONAL,
  organizational-unit-names  [6] OrganizationalUnitNames OPTIONAL }

CountryName ::= [APPLICATION 1] CHOICE {
  x121-dcc-code        NumericString (SIZE (ub-country-name-numeric-length)),
  iso-3166-alpha2-code PrintableString (SIZE (ub-country-name-alpha-length)) }

AdministrationDomainName ::= [APPLICATION 2] CHOICE {
  numeric   NumericString (SIZE (0..ub-domain-name-length)),
  printable PrintableString (SIZE (0..ub-domain-name-length)) }

NetworkAddress ::= X121Address

X121Address ::= NumericString (SIZE (1..ub-x121-address-length))

TerminalIdentifier ::= PrintableString (SIZE (1..ub-terminal-id-length))

PrivateDomainName ::= CHOICE {
  numeric   NumericString (SIZE (1..ub-domain-name-length)),
  printable PrintableString (SIZE (1..ub-domain-name-length)) }

OrganizationName ::= PrintableString (SIZE (1..ub-organization-name-length))

NumericUserIdentifier ::= NumericString (SIZE (1..ub-numeric-user-id-length))

PersonalName ::= SET {
  surname              [0] PrintableString (SIZE (1..ub-surname-length)),
  given-name           [1] PrintableString (SIZE (1..ub-given-name-length)) OPTIONAL,
  initials             [2] PrintableString (SIZE (1..ub-initials-length)) OPTIONAL,
  generation-qualifier [3] PrintableString (SIZE (1..ub-generation-qualifier-length)) OPTIONAL }

OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units) OF OrganizationalUnitName

OrganizationalUnitName ::= PrintableString (SIZE (1..ub-organizational-unit-name-length))


-- Built-in Domain-defined Attributes

BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE (1..ub-domain-defined-attributes) OF BuiltInDomainDefinedAttribute

BuiltInDomainDefinedAttribute ::= SEQUENCE {
  type  PrintableString (SIZE (1..ub-domain-defined-attribute-type-length)),
  value PrintableString (SIZE (1..ub-domain-defined-attribute-value-length))}


-- Extension Attributes

ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF ExtensionAttribute

ExtensionAttribute ::=  SEQUENCE {
  extension-attribute-type  [0] INTEGER (0..ub-extension-attributes),
  extension-attribute-value [1] ANY DEFINED BY extension-attribute-type }


-- authority key identifier syntax

AuthorityKeyIdentifier ::= SEQUENCE {
  keyIdentifier             [0] IMPLICIT KeyIdentifier OPTIONAL,
  authorityCertIssuer       [1] IMPLICIT GeneralNames OPTIONAL,
  authorityCertSerialNumber [2] IMPLICIT CertificateSerialNumber OPTIONAL }

KeyIdentifier ::= OCTET STRING


-- subject key identifier syntax

SubjectKeyIdentifier ::= KeyIdentifier


-- key usage extension syntax

KeyUsage ::= BIT STRING {
  digitalSignature(0),
  nonRepudiation  (1),
  keyEncipherment (2),
  dataEncipherment(3),
  keyAgreement    (4),
  keyCertSign     (5),
  cRLSign         (6),
  encipherOnly    (7),
  decipherOnly    (8) }


-- private key usage period extension syntax

PrivateKeyUsagePeriod ::= SEQUENCE {
  notBefore [0] IMPLICIT GeneralizedTime OPTIONAL,
  notAfter  [1] IMPLICIT GeneralizedTime OPTIONAL }


-- certificate policies extension syntax

CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation

PolicyInformation ::= SEQUENCE {
  policyIdentifier CertPolicyId,
  policyQualifiers SEQUENCE SIZE (1..MAX) OF PolicyQualifierInfo OPTIONAL }

CertPolicyId ::= OBJECT IDENTIFIER

PolicyQualifierInfo ::= SEQUENCE {
  policyQualifierId PolicyQualifierId,
  qualifier         ANY DEFINED BY policyQualifierId }

PolicyQualifierId ::= OBJECT IDENTIFIER (id-qt-cps|id-qt-unotice)


-- policy mapping extension syntax

PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
  issuerDomainPolicy  CertPolicyId,
  subjectDomainPolicy CertPolicyId }


-- subject alternative name extension syntax

SubjectAltName ::= GeneralNames

GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName

GeneralName ::= CHOICE {
  otherName                 [0] IMPLICIT AnotherName,
  rfc822Name                [1] IMPLICIT IA5String,
  dNSName                   [2] IMPLICIT IA5String,
  x400Address               [3] IMPLICIT ORAddress,
  directoryName             [4] Name,
  ediPartyName              [5] IMPLICIT EDIPartyName,
  uniformResourceIdentifier [6] IMPLICIT IA5String,
  iPAddress                 [7] IMPLICIT OCTET STRING,
  registeredID              [8] IMPLICIT OBJECT IDENTIFIER }

AnotherName ::= SEQUENCE {
  type-id     OBJECT IDENTIFIER,
  value   [0] EXPLICIT ANY DEFINED BY type-id }

EDIPartyName ::= SEQUENCE {
  nameAssigner [0] DirectoryString OPTIONAL,
  partyName    [1] DirectoryString }


-- issuer alternative name extension syntax

IssuerAltName ::= GeneralNames

SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute


-- basic constraints extension syntax

BasicConstraints ::= SEQUENCE {
  cA                BOOLEAN DEFAULT FALSE,
  pathLenConstraint INTEGER (0..MAX) OPTIONAL }


-- name constraints extension syntax

NameConstraints ::= SEQUENCE {
  permittedSubtrees [0] IMPLICIT GeneralSubtrees OPTIONAL,
  excludedSubtrees  [1] IMPLICIT GeneralSubtrees OPTIONAL }

GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

GeneralSubtree ::= SEQUENCE {
  base        GeneralName,
  minimum [0] IMPLICIT BaseDistance DEFAULT 0,
  maximum [1] IMPLICIT BaseDistance OPTIONAL }

BaseDistance ::= INTEGER (0..MAX)


-- policy constraints extension syntax

PolicyConstraints ::= SEQUENCE {
  requireExplicitPolicy [0] IMPLICIT SkipCerts OPTIONAL,
  inhibitPolicyMapping  [1] IMPLICIT SkipCerts OPTIONAL }

SkipCerts ::= INTEGER (0..MAX)


-- CRL distribution points extension syntax

CRLDistPointsSyntax ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint

DistributionPoint ::= SEQUENCE {
  distributionPoint [0] DistributionPointName OPTIONAL,
  reasons           [1] IMPLICIT ReasonFlags OPTIONAL,
  cRLIssuer         [2] IMPLICIT GeneralNames OPTIONAL }

DistributionPointName ::= CHOICE {
  fullName                [0] IMPLICIT GeneralNames,
  nameRelativeToCRLIssuer [1] IMPLICIT RelativeDistinguishedName }

ReasonFlags ::= BIT STRING {
  unused              (0),
  keyCompromise       (1),
  cACompromise        (2),
  affiliationChanged  (3),
  superseded          (4),
  cessationOfOperation(5),
  certificateHold     (6) }


-- extended key usage extension syntax

ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

KeyPurposeId ::= OBJECT IDENTIFIER

END
